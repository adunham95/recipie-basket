// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Link {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  url         String
  imageUrl    String
  category    String
  userID     String?   @db.ObjectId
  user       User? @relation(fields: [userID], references: [id])
}

model Post {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String? @unique @db.ObjectId
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  image         String?
  primaryColor  String?
  secondaryColor String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  bookmarks     Link[]
  recipies      Recipe[]

  @@map(name: "users")
}

model Recipe {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  title         String
  description   String
  image         String
  serving       Int
  userID        String   @db.ObjectId
  user          User @relation(fields: [userID], references: [id])
  ingredients   Ingredients[]
  instructions  Instructions[]
  history       RecipeHisory[]
  categories    Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds   String[]   @db.ObjectId

  @@map(name: "recipe")
}


model Ingredients{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipeID      String @db.ObjectId
  recipe        Recipe @relation(fields: [recipeID], references: [id])
  ingredientID  String @db.ObjectId
  ingredient    Ingredient @relation(fields: [ingredientID], references: [id])
  count         Float
  type          String
}

model Ingredient{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  name          String @unique
  image         String
  ingredients   Ingredients[]
}

model Instructions{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipeID      String @db.ObjectId
  recipe        Recipe @relation(fields: [recipeID], references: [id])
  order         Int
  description   String
}


model RecipeHisory{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipeID      String @db.ObjectId
  recipe        Recipe @relation(fields: [recipeID], references: [id])
}

model Category{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  title         String @unique
  recipeIDs     String[] @db.ObjectId
  recpies       Recipe[] @relation(fields: [recipeIDs], references: [id])
}